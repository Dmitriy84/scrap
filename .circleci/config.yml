# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

orbs:
  gradle: circleci/gradle@3.0.0
  aws-cli: circleci/aws-cli@4.1.2

parameters:
  test:
    type: enum
    enum: [ "scrap", "analysis" ]
    default: scrap
  ALLURE_JOB_RUN_ID:
    type: string
    default: ''
  ALLURE_USERNAME:
    type: string
    default: ''

executors:
  my-executor:
    docker:
      - image: cimg/openjdk:19.0.1-browsers
  working_directory: /home/circleci

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    executor: my-executor
    environment:
      QASE_ENABLE: "false"
      SPRING_PROFILES_ACTIVE: test
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Submodules update"
          command: git submodule update --init --recursive --force --remote
      - gradle/with_cache:
          deps_checksum_file: build.gradle.kts
          steps:
            - run:
                command: ./gradlew --build-cache build -x test
                name: Cache gradle build
                working_directory: ""
          wrapper_checksum_file: gradle/wrapper/gradle-wrapper.properties
      - persist_to_workspace:
          root: ~/
          paths:
            - project

  aws-setup:
    executor: my-executor
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: default
      - aws-cli/role_arn_setup:
          profile_name: new-profile
          role_arn: arn:aws:iam::757654778930:user/circle_ci_user
          source_profile: default

  run:
    executor: my-executor
    environment:
      QASE_ENABLE: "false"
      SPRING_PROFILES_ACTIVE: test
      ALLURE_ENDPOINT: https://demo.testops.cloud
      ALLURE_PROJECT_ID: 1691
      ALLURE_RESULTS: money/build/allure-results
      ALLURE_JOB_RUN_ID: << pipeline.parameters.ALLURE_JOB_RUN_ID >>
      ALLURE_USERNAME: << pipeline.parameters.ALLURE_USERNAME >>
    steps:
      - attach_workspace:
          at: project
      - gradle/with_cache:
          deps_checksum_file: build.gradle.kts
          steps:
            - run:
                name: Download allurectl
                working_directory: "project/project"
                command: curl -fsSL https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_amd64 -o allurectl && chmod +x allurectl
            - run:
                name: Scrape rates
                working_directory: "project/project"
                command: ./allurectl --insecure watch -- ./gradlew --build-cache :money:test :mono:test -PincludeTags=<< pipeline.parameters.test >> --tests "*"
                #                no_output_timeout: 12h
          wrapper_checksum_file: gradle/wrapper/gradle-wrapper.properties
      - gradle/collect_test_results:
          #          reports_path: project/project/money/rates.csv
          reports_path: project/project/money/build/reports/allure-report/allureReport/
          test_results_path: project/project/money/build/test-results/test/


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  run-scrape-workflow:
    jobs:
      - build
      - aws-setup:
          requires:
            - build
          context: aws
      - run:
          requires:
            - aws-setup
          context: aws